"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArgumentBuilder = void 0;
const path_1 = require("path");
const URL_REGISTRY = __importStar(require("./urlRegistry"));
const nodeAPIInclude_1 = require("./nodeAPIInclude");
class ArgumentBuilder {
    constructor(config, options, rtd) {
        this.config = config;
        this.options = options;
        this.rtd = rtd;
    }
    buildCmakeCommandLine() {
        return __awaiter(this, void 0, void 0, function* () {
            let baseCommand = `"${this.options.cmakeToUse}" "${this.options.packageDirectory}" --no-warn-unused-cli`;
            const defines = yield this.buildDefines();
            baseCommand += ` ${defines.map(d => `-D${d[0]}="${d[1]}"`).join(" ")}`;
            if (this.options.generatorToUse !== 'native') {
                baseCommand += ` -G"${this.options.generatorToUse}"`;
            }
            console.log(baseCommand);
            return baseCommand;
        });
    }
    buildGeneratorCommandLine(stagingDir) {
        return `"${this.options.cmakeToUse}" --build "${stagingDir}" --config "${this.options.buildType}"`;
    }
    buildDefines() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const pathConfig = URL_REGISTRY.getPathsForConfig(this.config);
            const retVal = [];
            retVal.push(['CMAKE_BUILD_TYPE', this.options.buildType]);
            if (this.config.toolchainFile) {
                retVal.push(['CMAKE_TOOLCHAIN_FILE', (0, path_1.resolve)(this.config.toolchainFile)]);
            }
            if (this.config.os === 'win32') {
                const libs = this.rtd.winLibs;
                if (libs === null || libs === void 0 ? void 0 : libs.length) {
                    retVal.push(['CMAKE_JS_LIB', libs.join(';')]);
                }
            }
            else if (this.config.os === 'darwin') {
                retVal.push(['CMAKE_JS_CXX_FLAGS', `-undefined dynamic_lookup`]);
            }
            const includes = [];
            if (pathConfig.headerOnly) {
                includes.push((0, path_1.join)(this.rtd.internalPath, '/include/node'));
            }
            else {
                includes.push((0, path_1.join)(this.rtd.internalPath, '/src'), (0, path_1.join)(this.rtd.internalPath, '/deps/v8/include'), (0, path_1.join)(this.rtd.internalPath, '/deps/uv/include'));
            }
            if ((_a = this.options.nodeAPI) === null || _a === void 0 ? void 0 : _a.includes('nan')) {
                console.warn(`WARNING: specified nodeAPI ${this.options.nodeAPI} seems to be nan - The usage of nan is discouraged due to subtle and hard-to-fix ABI issues! Consider using node-addon-api / N-API instead!`);
            }
            if (!this.options.nodeAPI) {
                console.warn('WARNING: nodeAPI was not specified. The default changed from "nan" to "node-addon-api" in v0.3.0! Please make sure this is intended.');
            }
            const nodeApiInclude = yield (0, nodeAPIInclude_1.getNodeApiInclude)(this.options.packageDirectory, (_b = this.options.nodeAPI) !== null && _b !== void 0 ? _b : "node-addon-api");
            if (this.options.nodeAPI && !nodeApiInclude) {
                console.log(`WARNING: nodeAPI was specified, but module "${this.options.nodeAPI}" could not be found!`);
            }
            if (nodeApiInclude) {
                includes.push(nodeApiInclude);
            }
            retVal.push(['CMAKE_JS_INC', includes.join(';')]);
            retVal.push(['NODE_RUNTIME', this.config.runtime], ['NODE_ARCH', this.config.arch], ['NODE_PLATFORM', this.config.os], ['NODE_RUNTIMEVERSION', this.config.runtimeVersion], ['NODE_ABI_VERSION', `${this.rtd.abi}`]);
            retVal.push(['CMAKE_JS_DEFINES', this.config.additionalDefines.join(';')]);
            if (this.options.globalCMakeOptions && this.options.globalCMakeOptions.length > 0) {
                this.options.globalCMakeOptions.forEach(j => {
                    retVal.push([j.name, j.value.replace(/\$ROOT\$/g, (0, path_1.resolve)(this.options.packageDirectory))]);
                });
            }
            if (this.config.CMakeOptions && this.config.CMakeOptions.length > 0) {
                this.config.CMakeOptions.forEach(j => {
                    retVal.push([j.name, j.value.replace(/\$ROOT\$/g, (0, path_1.resolve)(this.options.packageDirectory))]);
                });
            }
            return retVal;
        });
    }
}
exports.ArgumentBuilder = ArgumentBuilder;
//# sourceMappingURL=argumentBuilder.js.map