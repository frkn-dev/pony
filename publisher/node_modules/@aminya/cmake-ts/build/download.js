"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadToStream = downloadToStream;
exports.downloadToString = downloadToString;
exports.downloadFile = downloadFile;
exports.downloadTgz = downloadTgz;
exports.downloadZip = downloadZip;
const request_1 = require("@cypress/request");
const crypto_1 = __importDefault(require("crypto"));
const lodash_1 = require("lodash");
const npmlog_1 = require("npmlog");
const fs_1 = require("fs");
const tar_1 = require("tar");
const unzipper_1 = require("unzipper");
const minizlib_1 = require("minizlib");
const memory_stream_1 = __importDefault(require("memory-stream"));
function downloadToStream(url, stream, hashType) {
    return new Promise((resolve, reject) => {
        const shasum = typeof hashType === "string" ? crypto_1.default.createHash(hashType) : null;
        let length = 0;
        let done = 0;
        let lastPercent = 0;
        (0, request_1.get)(url, { allowInsecureRedirect: true, followAllRedirects: true }).on('error', err => {
            reject(err);
        }).on('response', data => {
            length = parseInt(data.headers['content-length'] || '0', 10);
            if (!(0, lodash_1.isNumber)(length)) {
                length = 0;
            }
        }).on('data', chunk => {
            if (shasum) {
                shasum.update(chunk);
            }
            if (length) {
                done += chunk.length;
                const pc = Math.round(done / length * 10) * 10 + 10;
                if (pc > lastPercent) {
                    (0, npmlog_1.log)('verbose', 'DWNL', `${lastPercent}%`);
                    lastPercent = pc;
                }
            }
        }).pipe(stream);
        stream.once('error', (err) => reject(err));
        stream.once('finish', () => resolve(shasum ? shasum.digest('hex') : null));
    });
}
function downloadToString(url) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = new memory_stream_1.default();
        yield downloadToStream(url, result, null);
        return result.toString();
    });
}
function downloadFile(url, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = (0, lodash_1.isString)(opts) ? { path: opts } : opts;
        const result = (0, fs_1.createWriteStream)(options.path);
        const sum = yield downloadToStream(url, result, options.hashType);
        if (!checkHashSum(sum, options)) {
            throw new Error(`Checksum mismatch for download ${url}`);
        }
        return sum;
    });
}
function downloadTgz(url, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = (0, lodash_1.isString)(opts) ? { path: opts } : opts;
        const gunzip = new minizlib_1.Gunzip({});
        const extractor = (0, tar_1.extract)(options);
        gunzip.pipe(extractor);
        const sum = yield downloadToStream(url, gunzip, options.hashType);
        if (!checkHashSum(sum, options)) {
            throw new Error(`Checksum mismatch for download ${url}`);
        }
        return sum;
    });
}
function downloadZip(url, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = (0, lodash_1.isString)(opts) ? { path: opts } : opts;
        const extractor = (0, unzipper_1.Extract)({ path: options.path });
        const sum = yield downloadToStream(url, extractor, options.hashType);
        if (!checkHashSum(sum, options)) {
            throw new Error(`Checksum mismatch for download ${url}`);
        }
        return sum;
    });
}
function checkHashSum(sum, options) {
    return !options.hashType || !options.hashSum || options.hashSum === sum;
}
//# sourceMappingURL=download.js.map