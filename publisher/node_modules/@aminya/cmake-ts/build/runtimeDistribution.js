"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuntimeDistribution = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const util_1 = require("./util");
const url_join_1 = __importDefault(require("url-join"));
const URL_REGISTRY = __importStar(require("./urlRegistry"));
const DOWNLOADER = __importStar(require("./download"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const TEST_SUM = (sums, sum, fPath) => {
    const serverSum = sums.find(s => s.getPath === fPath);
    if (serverSum && serverSum.sum === sum) {
        return true;
    }
    return false;
};
class RuntimeDistribution {
    constructor(config) {
        this.config = config;
        this._abi = null;
    }
    get internalPath() {
        return (0, path_1.join)(URL_REGISTRY.HOME_DIRECTORY, '.cmake-ts', this.config.runtime, this.config.os, this.config.arch, `v${this.config.runtimeVersion}`);
    }
    get externalPath() {
        return URL_REGISTRY.getPathsForConfig(this.config).externalPath;
    }
    get winLibs() {
        return URL_REGISTRY.getPathsForConfig(this.config).winLibs.map(lib => (0, path_1.join)(this.internalPath, lib.dir, lib.name));
    }
    get headerOnly() {
        return URL_REGISTRY.getPathsForConfig(this.config).headerOnly;
    }
    get abi() {
        return this._abi;
    }
    checkDownloaded() {
        return __awaiter(this, void 0, void 0, function* () {
            let headers = false;
            let libs = true;
            let stats = yield (0, util_1.stat)(this.internalPath);
            if (!stats.isDirectory()) {
                headers = false;
            }
            if (this.headerOnly) {
                stats = yield (0, util_1.stat)((0, path_1.join)(this.internalPath, "include/node/node.h"));
                headers = stats.isFile();
            }
            else {
                stats = yield (0, util_1.stat)((0, path_1.join)(this.internalPath, "src/node.h"));
                if (stats.isFile()) {
                    stats = yield (0, util_1.stat)((0, path_1.join)(this.internalPath, "deps/v8/include/v8.h"));
                    headers = stats.isFile();
                }
            }
            if (this.config.os === 'win32') {
                const libStats = yield Promise.all(this.winLibs.map(lib => (0, util_1.stat)(lib)));
                const libsAreFile = libStats.every(libStat => libStat.isFile());
                libs = libsAreFile;
            }
            return headers && libs;
        });
    }
    determineABI() {
        return __awaiter(this, void 0, void 0, function* () {
            const files = yield (0, fast_glob_1.default)("*/node_version.h", {
                cwd: (0, path_1.join)(this.internalPath, "include"),
                absolute: true,
                onlyFiles: true,
                braceExpansion: false,
            });
            const filesNum = files.length;
            if (filesNum === 0) {
                return Promise.reject(new Error("couldn't find node_version.h"));
                return;
            }
            if (filesNum !== 1) {
                return Promise.reject(new Error("more than one node_version.h was found."));
                return;
            }
            const fName = files[0];
            let contents;
            try {
                contents = yield (0, fs_extra_1.readFile)(fName, 'utf8');
            }
            catch (err) {
                if (err instanceof Error) {
                    return Promise.reject(err);
                }
                throw err;
            }
            const match = contents.match(/#define\s+NODE_MODULE_VERSION\s+(\d+)/);
            if (!match) {
                return Promise.reject(new Error('Failed to find NODE_MODULE_VERSION macro'));
                return;
            }
            const version = parseInt(match[1], 10);
            if (isNaN(version)) {
                return Promise.reject(new Error('Invalid version specified by NODE_MODULE_VERSION macro'));
                return;
            }
            this._abi = version;
            return Promise.resolve();
        });
    }
    ensureDownloaded() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.checkDownloaded())) {
                yield this.download();
            }
        });
    }
    download() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, fs_extra_1.ensureDir)(this.internalPath);
            const sums = yield this.downloadHashSums();
            yield this.downloadTar(sums);
            yield this.downloadLibs(sums);
        });
    }
    downloadHashSums() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config.runtime === 'node' || this.config.runtime === 'iojs') {
                const sumurl = (0, url_join_1.default)(this.externalPath, "SHASUMS256.txt");
                const str = yield DOWNLOADER.downloadToString(sumurl);
                return str.split('\n').map(line => {
                    const parts = line.split(/\s+/);
                    return {
                        getPath: parts[1],
                        sum: parts[0],
                    };
                }).filter(i => i.getPath && i.sum);
            }
            return null;
        });
    }
    downloadTar(sums) {
        return __awaiter(this, void 0, void 0, function* () {
            const tarLocalPath = URL_REGISTRY.getPathsForConfig(this.config).tarPath;
            const tarUrl = (0, url_join_1.default)(this.externalPath, tarLocalPath);
            const sum = yield DOWNLOADER.downloadTgz(tarUrl, {
                cwd: this.internalPath,
                hashType: sums ? 'sha256' : null,
                strip: 1,
                filter: (p) => {
                    if (p === this.internalPath) {
                        return true;
                    }
                    const ext = (0, path_1.extname)(p);
                    return ext && ext.toLowerCase() === '.h';
                },
            });
            if (sums && !TEST_SUM(sums, sum, tarLocalPath)) {
                throw new Error("Checksum mismatch");
            }
        });
    }
    downloadLibs(sums) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config.os !== 'win32') {
                return;
            }
            const paths = URL_REGISTRY.getPathsForConfig(this.config);
            yield Promise.all(paths.winLibs.map(path => this.downloadLib(path, sums)));
        });
    }
    downloadLib(path, sums) {
        return __awaiter(this, void 0, void 0, function* () {
            const fPath = path.dir ? (0, url_join_1.default)(path.dir, path.name) : path.name;
            const libUrl = (0, url_join_1.default)(this.externalPath, fPath);
            yield (0, fs_extra_1.ensureDir)((0, path_1.join)(this.internalPath, path.dir));
            const sum = yield DOWNLOADER.downloadFile(libUrl, {
                path: (0, path_1.join)(this.internalPath, fPath),
                hashType: sums ? "sha256" : null,
            });
            if (sums && !TEST_SUM(sums, sum, fPath)) {
                throw new Error("Checksum mismatch");
            }
        });
    }
}
exports.RuntimeDistribution = RuntimeDistribution;
//# sourceMappingURL=runtimeDistribution.js.map