"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchPackage = searchPackage;
const path_1 = require("path");
const util_1 = require("../util");
function searchPackage(projectRoot, packageName) {
    return __awaiter(this, void 0, void 0, function* () {
        const isNode = yield isNodeProject(projectRoot);
        if (!isNode) {
            return null;
        }
        const packagePath = (0, path_1.join)(projectRoot, 'node_modules', packageName);
        const hasHeader = yield dirHasFile(packagePath, packageName === "node-addon-api" ? "napi.h" : `${packageName}.h`);
        if (hasHeader) {
            console.log(`Found package "${packageName}" at path ${packagePath}!`);
            return packagePath;
        }
        return searchPackage(goUp(projectRoot), packageName);
    });
}
function isNodeProject(dir) {
    return __awaiter(this, void 0, void 0, function* () {
        const pjson = (0, path_1.join)(dir, 'package.json');
        const node_modules = (0, path_1.join)(dir, 'node_modules');
        return (yield (0, util_1.stat)(pjson)).isFile() || (yield (0, util_1.stat)(node_modules)).isDirectory();
    });
}
;
function dirHasFile(dir, fileName) {
    return __awaiter(this, void 0, void 0, function* () {
        const filePath = (0, path_1.join)(dir, fileName);
        return (yield (0, util_1.stat)(filePath)).isFile();
    });
}
;
function goUp(dir) {
    let myDir = dir;
    const items = myDir.split(path_1.sep);
    const scope = items[items.length - 2];
    if (scope && scope.charAt(0) === '@') {
        myDir = (0, path_1.join)(myDir, '..');
    }
    myDir = (0, path_1.join)(myDir, '..', '..');
    return (0, path_1.normalize)(myDir);
}
//# sourceMappingURL=search.js.map