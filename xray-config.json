
#### Example XRay config with Vmess/VlessXTLSVision/VlessGrpc/Shadowsocks and API

{
  "log": {
    "loglevel": "debug"
  },
  "inbounds": [
    {
      "listen": "0.0.0.0",
      "port": 12345,
      "protocol": "dokodemo-door",
      "settings": {
        "address": "127.0.0.1"
      },
      "streamSettings": {
        "security": "tls",
        "tlsSettings": {
          "certificates": [
            {
              "certificateFile": "cert.pem",
              "keyFile": "key.pem"
            }
          ]
        }
      },
      "tag": "API_INBOUND"
    },
    {
      "tag": "Shadowsocks",
      "listen": "0.0.0.0",
      "port": 1080,
      "protocol": "shadowsocks",
      "settings": {
        "clients": [],
        "network": "tcp,udp"
      }
    },
    {
      "tag": "Vmess",
      "listen": "0.0.0.0",
      "port": 8081,
      "protocol": "vmess",
      "settings": {
        "clients": []
      },
      "streamSettings": {
        "network": "tcp",
        "tcpSettings": {
          "header": {
            "type": "http",
            "request": {
              "method": "GET",
              "path": [
                "/"
              ],
              "headers": {
                "Host": [
                  "google.com"
                ]
              }
            },
            "response": {}
          }
        },
        "security": "none"
      },
      "sniffing": {
        "enabled": true,
        "destOverride": [
          "http",
          "tls"
        ]
      }
    },
    {
      "tag": "VlessXtls",
      "listen": "0.0.0.0",
      "port": 8433,
      "protocol": "vless",
      "settings": {
        "clients": [
          {
            "id": "1ec1499c-c255-4d67-9d12-c5cd6c2a9a53",
            "level": 1,
            "email": "user@example.com"
          }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "serverNames": [
            "cdn.discordapp.com",
            "discordapp.com"
          ],
          "privateKey": "4AQgu1qeCaGT8nnZTOnKLSOudSp_Z_kAAAAAAA",
          "shortIds": [
            "e5c4d84fbAAAAAA"
          ],
          "dest": "discordapp.com:443"
        }
      }
    },
    {
      "tag": "VlessGrpc",
      "listen": "0.0.0.0",
      "port": 2053,
      "protocol": "vless",
      "settings": {
        "clients": [],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "grpc",
        "grpcSettings": {
          "serviceName": "xyz"
        },
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "discordapp.com:443",
          "xver": 0,
          "serverNames": [
            "cdn.discordapp.com",
            "discordapp.com"
          ],
          "privateKey": "4AQgu1qeCaGT8nnZTOnKLSOudSp_Z_kS0kzIAAAAA",
          "shortIds": [
            "",
            "e5c4d84fb33AAAAAA"
          ]
        }
      },
      "sniffing": {
        "enabled": true,
        "destOverride": [
          "http",
          "tls"
        ]
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "tag": "DIRECT"
    },
    {
      "protocol": "blackhole",
      "tag": "BLOCK"
    }
  ],
  "routing": {
    "rules": [
      {
        "inboundTag": [
          "API_INBOUND"
        ],
        "source": [
          "127.0.0.1",
          "194.54.156.79"
        ],
        "outboundTag": "API",
        "type": "field"
      },
      {
        "ip": [
          "geoip:private"
        ],
        "outboundTag": "BLOCK",
        "type": "field"
      },
      {
        "domain": [
          "geosite:private"
        ],
        "outboundTag": "BLOCK",
        "type": "field"
      },
      {
        "protocol": [
          "bittorrent"
        ],
        "outboundTag": "BLOCK",
        "type": "field"
      }
    ]
  },
  "api": {
    "listen": "127.0.0.1:23456",
    "services": [
      "HandlerService",
      "StatsService",
      "LoggerService",
      "ReflectionService"
    ],
    "tag": "API"
  },
  "stats": {},
  "policy": {
    "levels": {
      "0": {
        "statsUserUplink": true,
        "statsUserDownlink": true,
        "statsUserOnline": true
      }
    },
    "system": {
      "statsInboundDownlink": false,
      "statsInboundUplink": false,
      "statsOutboundDownlink": true,
      "statsOutboundUplink": true
    }
  }
}
