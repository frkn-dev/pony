// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddUserOperation {
    #[prost(message, optional, tag = "1")]
    pub user: ::core::option::Option<super::super::super::common::protocol::User>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveUserOperation {
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddInboundRequest {
    #[prost(message, optional, tag = "1")]
    pub inbound: ::core::option::Option<super::super::super::core::InboundHandlerConfig>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddInboundResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveInboundRequest {
    #[prost(string, tag = "1")]
    pub tag: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveInboundResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlterInboundRequest {
    #[prost(string, tag = "1")]
    pub tag: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub operation: ::core::option::Option<
        super::super::super::common::serial::TypedMessage,
    >,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlterInboundResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInboundUserRequest {
    #[prost(string, tag = "1")]
    pub tag: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub email: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInboundUserResponse {
    #[prost(message, repeated, tag = "1")]
    pub users: ::prost::alloc::vec::Vec<super::super::super::common::protocol::User>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetInboundUsersCountResponse {
    #[prost(int64, tag = "1")]
    pub count: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddOutboundRequest {
    #[prost(message, optional, tag = "1")]
    pub outbound: ::core::option::Option<
        super::super::super::core::OutboundHandlerConfig,
    >,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddOutboundResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveOutboundRequest {
    #[prost(string, tag = "1")]
    pub tag: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveOutboundResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlterOutboundRequest {
    #[prost(string, tag = "1")]
    pub tag: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub operation: ::core::option::Option<
        super::super::super::common::serial::TypedMessage,
    >,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlterOutboundResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Config {}
/// Generated client implementations.
pub mod handler_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct HandlerServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl HandlerServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> HandlerServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> HandlerServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            HandlerServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn add_inbound(
            &mut self,
            request: impl tonic::IntoRequest<super::AddInboundRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddInboundResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xray.app.proxyman.command.HandlerService/AddInbound",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xray.app.proxyman.command.HandlerService",
                        "AddInbound",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove_inbound(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveInboundRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveInboundResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xray.app.proxyman.command.HandlerService/RemoveInbound",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xray.app.proxyman.command.HandlerService",
                        "RemoveInbound",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn alter_inbound(
            &mut self,
            request: impl tonic::IntoRequest<super::AlterInboundRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AlterInboundResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xray.app.proxyman.command.HandlerService/AlterInbound",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xray.app.proxyman.command.HandlerService",
                        "AlterInbound",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_inbound_users(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInboundUserRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetInboundUserResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xray.app.proxyman.command.HandlerService/GetInboundUsers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xray.app.proxyman.command.HandlerService",
                        "GetInboundUsers",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_inbound_users_count(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInboundUserRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetInboundUsersCountResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xray.app.proxyman.command.HandlerService/GetInboundUsersCount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xray.app.proxyman.command.HandlerService",
                        "GetInboundUsersCount",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn add_outbound(
            &mut self,
            request: impl tonic::IntoRequest<super::AddOutboundRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddOutboundResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xray.app.proxyman.command.HandlerService/AddOutbound",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xray.app.proxyman.command.HandlerService",
                        "AddOutbound",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove_outbound(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveOutboundRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveOutboundResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xray.app.proxyman.command.HandlerService/RemoveOutbound",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xray.app.proxyman.command.HandlerService",
                        "RemoveOutbound",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn alter_outbound(
            &mut self,
            request: impl tonic::IntoRequest<super::AlterOutboundRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AlterOutboundResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/xray.app.proxyman.command.HandlerService/AlterOutbound",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "xray.app.proxyman.command.HandlerService",
                        "AlterOutbound",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
