// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Config {
    #[prost(enumeration = "LogType", tag = "1")]
    pub error_log_type: i32,
    #[prost(enumeration = "super::super::common::log::Severity", tag = "2")]
    pub error_log_level: i32,
    #[prost(string, tag = "3")]
    pub error_log_path: ::prost::alloc::string::String,
    #[prost(enumeration = "LogType", tag = "4")]
    pub access_log_type: i32,
    #[prost(string, tag = "5")]
    pub access_log_path: ::prost::alloc::string::String,
    #[prost(bool, tag = "6")]
    pub enable_dns_log: bool,
    #[prost(string, tag = "7")]
    pub mask_address: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LogType {
    None = 0,
    Console = 1,
    File = 2,
    Event = 3,
}
impl LogType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "None",
            Self::Console => "Console",
            Self::File => "File",
            Self::Event => "Event",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "None" => Some(Self::None),
            "Console" => Some(Self::Console),
            "File" => Some(Self::File),
            "Event" => Some(Self::Event),
            _ => None,
        }
    }
}
