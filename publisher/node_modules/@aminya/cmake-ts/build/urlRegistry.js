"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HOME_DIRECTORY = void 0;
exports.getPathsForConfig = getPathsForConfig;
const gte_1 = __importDefault(require("semver/functions/gte"));
const lt_1 = __importDefault(require("semver/functions/lt"));
const os_1 = __importDefault(require("os"));
const NODE_MIRROR = process.env.NVM_NODEJS_ORG_MIRROR || "https://nodejs.org/dist";
const IOJS_MIRROR = process.env.NVM_IOJS_ORG_MIRROR || "https://iojs.org/dist";
const ELECTRON_MIRROR = process.env.ELECTRON_MIRROR || "https://atom.io/download/atom-shell";
exports.HOME_DIRECTORY = process.env[(os_1.default.platform() === "win32") ? "USERPROFILE" : "HOME"];
function getPathsForConfig(config) {
    switch (config.runtime) {
        case "node": {
            return ((0, lt_1.default)(config.runtimeVersion, "4.0.0") ? nodePrehistoric : nodeModern)(config);
        }
        case "iojs": {
            return {
                externalPath: `${IOJS_MIRROR}/v${config.runtimeVersion}/`,
                winLibs: [{
                        dir: config.arch === 'x64' ? 'win-x64' : 'win-x86',
                        name: `${config.runtime}.lib`,
                    }],
                tarPath: `${config.runtime}-v${config.runtimeVersion}.tar.gz`,
                headerOnly: false,
            };
        }
        case "electron": {
            return {
                externalPath: `${ELECTRON_MIRROR}/v${config.runtimeVersion}/`,
                winLibs: [{
                        dir: config.arch === 'x64' ? 'x64' : '',
                        name: 'node.lib',
                    }],
                tarPath: `node-v${config.runtimeVersion}.tar.gz`,
                headerOnly: (0, gte_1.default)(config.runtimeVersion, "4.0.0-alpha"),
            };
        }
        default: {
            throw new Error(`Unsupported runtime ${config.runtime}`);
        }
    }
}
function nodePrehistoric(config) {
    return {
        externalPath: `${NODE_MIRROR}/v${config.runtimeVersion}/`,
        winLibs: [{
                dir: config.arch === 'x64' ? 'x64' : '',
                name: `${config.runtime}.lib`,
            }],
        tarPath: `${config.runtime}-v${config.runtimeVersion}.tar.gz`,
        headerOnly: false,
    };
}
function nodeModern(config) {
    return {
        externalPath: `${NODE_MIRROR}/v${config.runtimeVersion}/`,
        winLibs: [{
                dir: config.arch === 'x64' ? 'win-x64' : 'win-x86',
                name: `${config.runtime}.lib`,
            }],
        tarPath: `${config.runtime}-v${config.runtimeVersion}-headers.tar.gz`,
        headerOnly: true,
    };
}
//# sourceMappingURL=urlRegistry.js.map