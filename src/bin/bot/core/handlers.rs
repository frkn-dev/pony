use async_trait::async_trait;
use teloxide::types::ParseMode;
use teloxide::{payloads::SendMessageSetters, prelude::*, types::Me, utils::command::BotCommands};

use super::Command;
use super::UserStorage;

use pony::Result;

use super::keyboards::Keyboards;
use super::BotState;
use crate::core::http::ApiRequests;

#[async_trait]
pub trait Handlers {
    async fn message_handler(&self, bot: Bot, msg: Message, me: Me) -> Result<()>;
    async fn callback_handler(&self, bot: Bot, q: CallbackQuery) -> Result<()>;
}

#[async_trait]
impl Handlers for BotState {
    async fn message_handler(&self, bot: Bot, msg: Message, me: Me) -> Result<()> {
        if let Some(text) = msg.text() {
            match BotCommands::parse(text, me.username()) {
                Ok(Command::Help) => {
                    // Just send the description of all commands.
                    bot.send_message(msg.chat.id, Command::descriptions().to_string())
                        .await?;
                }
                Ok(Command::Start) => {
                    bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /register")
                        .await?;
                }

                Ok(Command::Register) => {
                    // Handle user registration.
                    if let Some(user) = msg.from {
                        if let Some(username) = user.username {
                            match self.register_user(&username).await {
                                Ok(Some(user_id)) => {
                                    let reply = format!("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é {}", username);
                                    let _ = self.add_user(&username, user_id).await;

                                    bot.send_message(msg.chat.id, reply).await?;
                                }
                                Ok(None) => {
                                    let reply = format!(
                                        "–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–º–∞–Ω–¥—É /connect  {}",
                                        username
                                    );
                                    bot.send_message(msg.chat.id, reply).await?;
                                }
                                Err(e) => {
                                    log::error!("Command::Register error {}", e);
                                    let reply = format!("–£–ø—Å, –æ—à–∏–±–∫–∞ {}", username);
                                    bot.send_message(msg.chat.id, reply).await?;
                                }
                            }
                        }
                    }
                }

                // Handle connections
                Ok(Command::Connect) => {
                    if let Some(user) = msg.from {
                        if let Some(username) = user.username {
                            let user_map = self.users.lock().await;
                            if let Some(user_id) = user_map.get(&username) {
                                let res = self
                                    .get_user_vpn_connection(
                                        &user_id,
                                        self.settings.bot.daily_limit_mb,
                                    )
                                    .await;
                                match res {
                                    Ok(Some(connection_info)) => {
                                        let response = "–í—ã–±–µ—Ä–∏ VPN –∫–æ—Ñ–∏–≥—É—Ä–∞—Ü–∏—é".to_string();

                                        let keyboard = self.conn_keyboard(connection_info).await;

                                        bot.send_message(msg.chat.id, response)
                                            .reply_markup(keyboard)
                                            .await?;
                                    }
                                    Ok(None) => {
                                        bot.send_message(
                                        msg.chat.id,
                                        "–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –°–æ–∑–¥–∞–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /connect —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç ",
                                    )
                                    .await?;
                                    }
                                    Err(e) => {
                                        log::error!("VPN conn error: {:?}", e);
                                        bot.send_message(
                                            msg.chat.id,
                                            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                                        )
                                        .await?;
                                    }
                                }
                            } else {
                                bot.send_message(msg.chat.id, "–ù—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è /register")
                                    .await?;
                            }
                        }
                    }
                }

                // Handle user stat
                Ok(Command::Limit) => {
                    if let Some(user) = msg.from {
                        if let Some(username) = user.username {
                            let user_map = self.users.lock().await;
                            if let Some(user_id) = user_map.get(&username) {
                                let stats = self.get_user_traffic_stat(&user_id).await;
                                match stats {
                                    Ok(Some(stats)) => {
                                        let stat_str = self.format_traffic_stats(
                                            stats,
                                            self.settings.bot.daily_limit_mb,
                                        );
                                        bot.send_message(msg.chat.id, stat_str).await?;
                                    }

                                    Ok(None) => {
                                        bot.send_message(
                                            msg.chat.id,
                                            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                                        )
                                        .await?;
                                    }

                                    Err(e) => {
                                        log::error!("Stat conn error: {:?}", e);
                                        bot.send_message(
                                            msg.chat.id,
                                            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                                        )
                                        .await?;
                                    }
                                }
                            } else {
                                bot.send_message(msg.chat.id, "–ù—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è /register")
                                    .await?;
                            }
                        }
                    }
                }
                Err(_) => {
                    bot.send_message(msg.chat.id, "Command not found!").await?;
                }
            }
        }

        Ok(())
    }

    async fn callback_handler(&self, bot: Bot, q: CallbackQuery) -> Result<()> {
        println!("Callback data {:?}", q.data);

        if let Some(ref key) = q.data {
            let map_lock = self.callback_map.lock().await;
            if let Some(conn) = map_lock.get(key) {
                let text = format!("üîó –í–∞—à–∞ VPN —Å—Å—ã–ª–∫–∞:\n\n`{}`", conn);

                bot.answer_callback_query(&q.id).await?;

                if let Some(message) = q.clone().regular_message() {
                    bot.edit_message_text(message.chat.id, message.id, text)
                        .parse_mode(ParseMode::MarkdownV2)
                        .await?;
                } else if let Some(id) = q.inline_message_id {
                    bot.edit_message_text_inline(id, text).await?;
                }

                log::info!("User chose: {}", conn);
            }
        }

        Ok(())
    }
}
