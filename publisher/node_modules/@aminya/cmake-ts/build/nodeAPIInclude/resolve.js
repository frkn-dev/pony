"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requireInclude = requireInclude;
exports.resolvePackage = resolvePackage;
const resolve_1 = __importDefault(require("resolve"));
function requireInclude(resolvedPath) {
    try {
        let consoleOutput = null;
        const origConsole = console.log;
        console.log = (msg) => { consoleOutput = msg; };
        const requireResult = require(resolvedPath);
        console.log = origConsole;
        if (typeof requireResult === "string") {
            return requireResult;
        }
        else if (typeof requireResult === "object") {
            if (typeof requireResult.include_dir === "string") {
                return requireResult.include_dir;
            }
            else if (typeof requireResult.include === "string") {
                return requireResult.include;
            }
            else if (consoleOutput !== null) {
                return consoleOutput;
            }
        }
    }
    catch (_a) {
    }
    return resolvedPath;
}
function resolvePackage(projectRoot, packageName) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const resolvedPath = yield resolveAsync(packageName, projectRoot);
            if (resolvedPath !== undefined) {
                return resolvedPath;
            }
        }
        catch (_a) {
        }
        return null;
    });
}
function resolveAsync(name, basedir) {
    return new Promise((promiseResolve) => {
        (0, resolve_1.default)(name, { basedir }, (err, res) => {
            if (err) {
                throw err;
            }
            return promiseResolve(res);
        });
    });
}
//# sourceMappingURL=resolve.js.map